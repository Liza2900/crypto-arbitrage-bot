import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from filters import (
    build_filters_menu,
    handle_filter_callback,
    EXCHANGES
)
from arbitrage import fetch_prices_from_exchanges, find_arbitrage_opportunities

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
def default_filters():
    return {
        'min_profit': 0.8,
        'min_volume': 10,
        'budget': 100,
        'is_futures': False,
        'exchanges_buy': {ex: True for ex in EXCHANGES},
        'exchanges_sell': {ex: True for ex in EXCHANGES},
        'max_lifetime': 30,
        'last_search_id': None  # –¥–æ–¥–∞–Ω–æ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
    }

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['filters'] = default_filters()
    await update.message.reply_text("üîç –í–∏–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É:",
                                    reply_markup=build_filters_menu(context.user_data['filters']))

# –ö–æ–º–∞–Ω–¥–∞ /filters
async def filters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = context.user_data.get('filters', default_filters())
    await update.message.reply_text("üîß –ó–º—ñ–Ω—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É:",
                                    reply_markup=build_filters_menu(filters))

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = context.user_data.get('filters', default_filters())

    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    search_id = update.update_id
    if filters.get("last_search_id") == search_id:
        logger.info("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç /search ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ")
        return
    filters["last_search_id"] = search_id

    await update.message.reply_text("‚è≥ –ü–æ—à—É–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")

    logger.info("üîé –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω –∑ –±—ñ—Ä–∂...")
    prices = await fetch_prices_from_exchanges()
    total_pairs = sum(len(p) for p in prices.values())
    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏: {total_pairs} –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä")

    if not prices:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∑ –±—ñ—Ä–∂.")
        return

    logger.info("üìä –®—É–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    signals = find_arbitrage_opportunities(prices, filters)
    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(signals)} –º–æ–∂–ª–∏–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")

    if not signals:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
    else:
        sig = signals[0]  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π —Å–ø—Ä–µ–¥
        net_profit = (sig['spread'] / 100) * filters['budget'] - sig['withdraw_fee']
        msg = (
            f"üí∞ <b>{sig['coin']} –ê—Ä–±—ñ—Ç—Ä–∞–∂</b>\n"
            f"üìâ –ö—É–ø–∏—Ç–∏ –Ω–∞: <b>{sig['buy_exchange']}</b> ‚Äî <code>${sig['buy_price']:.4f}</code>\n"
            f"üìà –ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞: <b>{sig['sell_exchange']}</b> ‚Äî <code>${sig['sell_price']:.4f}</code>\n"
            f"üì¶ –û–±—Å—è–≥: <code>${sig['volume']}</code>\n"
            f"üîÅ –ú–µ—Ä–µ–∂–∞: <b>{sig['network']}</b>\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –≤–∏–≤–æ–¥—É: <code>${sig['withdraw_fee']}</code>\n"
            f"üìä –°–ø—Ä–µ–¥ –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ—ó: <code>{net_profit:.2f}$ ({sig['spread']}%)</code>\n"
            f"‚úÖ –í–∏–≤—ñ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π: <b>{'‚úÖ' if sig.get('is_withdrawable', True) else '‚ùå'}</b>\n"
            f"‚è± –ß–∞—Å –ø–µ—Ä–µ–∫–∞–∑—É: <code>{sig.get('transfer_time', 'N/A')}</code>\n"
        )
        logger.info(f"üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è {sig['coin']}")
        await update.message.reply_text(msg, parse_mode='HTML')

# FastAPI app
app = FastAPI()
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("search", search))
application.add_handler(CommandHandler("filters", filters_command))
application.add_handler(CallbackQueryHandler(handle_filter_callback))

@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL)
    logging.info("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@app.post("/")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app.get("/")
def root():
    return {"message": "Bot is alive!"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=PORT, reload=False)
