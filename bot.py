import os
import logging
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from filters import (
    build_filters_menu,
    handle_filter_callback,
    EXCHANGES
)
from arbitrage import fetch_prices_from_exchanges, find_arbitrage_opportunities

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
def default_filters():
    return {
        'min_profit': 0.8,
        'min_volume': 10,
        'budget': 100,
        'is_futures': False,
        'exchanges_buy': {ex: True for ex in EXCHANGES},
        'exchanges_sell': {ex: True for ex in EXCHANGES},
        'max_lifetime': 30,
        'last_search_id': None
    }

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['filters'] = default_filters()
    await update.message.reply_text("üîç –í–∏–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É:",
                                    reply_markup=build_filters_menu(context.user_data['filters']))

# –ö–æ–º–∞–Ω–¥–∞ /filters
async def filters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = context.user_data.get('filters', default_filters())
    await update.message.reply_text("üîß –ó–º—ñ–Ω—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É –∞—Ä–±—ñ—Ç—Ä–∞–∂—É:",
                                    reply_markup=build_filters_menu(filters))

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = context.user_data.get('filters', default_filters())

    search_id = update.update_id
    if filters.get("last_search_id") == search_id:
        logger.info("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç /search ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ")
        return
    filters["last_search_id"] = search_id

    await update.message.reply_text("‚è≥ –ü–æ—à—É–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")

    logger.info("üîé –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω –∑ –±—ñ—Ä–∂...")
    prices = await fetch_prices_from_exchanges()
    total_pairs = sum(len(p) for p in prices.values())
    logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏: {total_pairs} –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä")

    if not prices:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω–∏ –∑ –±—ñ—Ä–∂.")
        return

    logger.info("üìä –®—É–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    signals = find_arbitrage_opportunities(prices, filters)
    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(signals)} –º–æ–∂–ª–∏–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–µ–ª–∏–∫—ñ –º–æ–Ω–µ—Ç–∏
    signals = [s for s in signals if s['coin'] not in ('BTC', 'ETH')]

    if not signals:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
        return

    context.user_data['signals'] = signals
    context.user_data['signal_index'] = 0

    await send_signal(update.message.reply_text, signals[0], filters)

async def send_signal(send_func, signal, filters):
    net_profit = (signal['spread'] / 100) * filters['budget'] - signal['withdraw_fee']
    msg = (
        f"üí∞ <b>{signal['coin']} –ê—Ä–±—ñ—Ç—Ä–∞–∂</b>\n"
        f"üìâ –ö—É–ø–∏—Ç–∏ –Ω–∞: <b>{signal['buy_exchange']}</b> ‚Äî <code>${int(signal['buy_price'])}</code>\n"
        f"üìà –ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞: <b>{signal['sell_exchange']}</b> ‚Äî <code>${int(signal['sell_price'])}</code>\n"
        f"üì¶ –û–±—Å—è–≥: <code>${int(signal['volume'])}</code>\n"
        f"üìä –¶—ñ–Ω–∞ –∑–∞ 1 –º–æ–Ω–µ—Ç—É: –ö—É–ø—ñ–≤–ª—è ‚Äî <code>${signal['buy_price']:.4f}</code>, –ü—Ä–æ–¥–∞–∂ ‚Äî <code>${signal['sell_price']:.4f}</code>\n"
        f"üîÅ –ú–µ—Ä–µ–∂–∞: <b>{signal['network']}</b>\n"
        f"üí∏ –ö–æ–º—ñ—Å—ñ—è –≤–∏–≤–æ–¥—É: <code>${signal['withdraw_fee']}</code>\n"
        f"üìä –°–ø—Ä–µ–¥ –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ—ó: <code>{net_profit:.2f}$ ({signal['spread']}%)</code>\n"
        f"‚úÖ –í–∏–≤—ñ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π: <b>{'‚úÖ' if signal.get('is_withdrawable', True) else '‚ùå'}</b>\n"
        f"‚è± –ß–∞—Å –ø–µ—Ä–µ–∫–∞–∑—É: <code>{signal.get('transfer_time', 'N/A')}</code>\n"
    )
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="next_signal")]]
    await send_func(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_next_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = context.user_data.get('signal_index', 0) + 1
    signals = context.user_data.get('signals', [])

    if index >= len(signals):
        await query.edit_message_text("‚úÖ –¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª.")
        return

    context.user_data['signal_index'] = index
    await send_signal(query.edit_message_text, signals[index], context.user_data.get('filters', default_filters()))

# FastAPI app
app = FastAPI()
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("search", search))
application.add_handler(CommandHandler("filters", filters_command))
application.add_handler(CallbackQueryHandler(handle_filter_callback))
application.add_handler(CallbackQueryHandler(handle_next_signal, pattern="^next_signal$"))

@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL)
    logging.info("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@app.post("/")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"status": "ok"}

@app.get("/")
def root():
    return {"message": "Bot is alive!"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=PORT, reload=False)
