import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, ContextTypes, CommandHandler,
                          MessageHandler, CallbackQueryHandler, filters)
from arbitrage import fetch_prices_from_exchanges, find_arbitrage_opportunities, EXCHANGES

from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DEFAULT_FILTERS = {
    'min_volume': 10,
    'min_profit': 0.8,
    'budget': 100,
    'exchanges_buy': {ex: True for ex in EXCHANGES.keys()},
    'exchanges_sell': {ex: True for ex in EXCHANGES.keys()}
}

def get_user_filters(context):
    if "filters" not in context.user_data:
        context.user_data["filters"] = DEFAULT_FILTERS.copy()
    return context.user_data["filters"]

def build_filters_menu(filters):
    keyboard = [
        [InlineKeyboardButton(f"üì¶ –ú—ñ–Ω. –æ–±—Å—è–≥: {filters['min_volume']}$", callback_data="set_min_volume")],
        [InlineKeyboardButton(f"üí∞ –ú—ñ–Ω. –ø—Ä–∏–±—É—Ç–æ–∫: {filters['min_profit']}%", callback_data="set_min_profit")],
        [InlineKeyboardButton(f"üßæ –ë—é–¥–∂–µ—Ç: {filters['budget']}$", callback_data="set_budget")],
        [InlineKeyboardButton("üîÅ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh")]
    ]

    keyboard.append([InlineKeyboardButton("–ë—ñ—Ä–∂—ñ –∫—É–ø—ñ–≤–ª—ñ", callback_data="toggle_buy_exchanges")])
    keyboard.append([InlineKeyboardButton("–ë—ñ—Ä–∂—ñ –ø—Ä–æ–¥–∞–∂—É", callback_data="toggle_sell_exchanges")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")])

    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.")

async def filters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = get_user_filters(context)
    await update.message.reply_text("üîß –ü–æ—Ç–æ—á–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏:", reply_markup=build_filters_menu(filters))

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = get_user_filters(context)

    await update.message.reply_text("üîé –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω –∑ –±—ñ—Ä–∂...")
    prices = await fetch_prices_from_exchanges()
    await update.message.reply_text(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏: {sum(len(p) for p in prices.values())} –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä")

    await update.message.reply_text("üìä –®—É–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    signals = find_arbitrage_opportunities(prices, filters)

    if not signals:
        await update.message.reply_text("‚ùå –ú–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑ —ñ–Ω—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
        return

    for sig in signals:
        msg = (
            f"üí∏ {sig['coin']}: {sig['buy_exchange']} ‚Üí {sig['sell_exchange']}\n"
            f"‚Ä¢ –ö—É–ø—ñ–≤–ª—è: {sig['buy_price']}$\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–∂: {sig['sell_price']}$\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ—ñ—Ç: {sig['spread']}%\n"
            f"‚Ä¢ –û–±—Å—è–≥: {sig['volume']}$\n"
            f"‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –≤–∏–≤–æ–¥—É: {sig['withdraw_fee']}\n"
            f"‚Ä¢ –ú–µ—Ä–µ–∂–∞: {sig['network']}\n"
            f"‚Ä¢ –ß–∞—Å –ø–µ—Ä–µ–∫–∞–∑—É: {sig['transfer_time']}"
        )
        await update.message.reply_text(msg)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    filters = get_user_filters(context)

    if query.data == "set_min_profit":
        context.user_data["awaiting"] = "min_profit"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É %:")
    elif query.data == "set_min_volume":
        context.user_data["awaiting"] = "min_volume"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —É $:\n\n‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ 10‚Äì30$ –¥–ª—è –±—é–¥–∂–µ—Ç—É –¥–æ 100$")
    elif query.data == "set_budget":
        context.user_data["awaiting"] = "budget"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç —É $:")
    elif query.data == "refresh":
        await query.edit_message_text("üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ...")
        await search(update, context)
    elif query.data == "toggle_buy_exchanges":
        buttons = [
            [InlineKeyboardButton(f"{'‚úÖ' if filters['exchanges_buy'][ex] else '‚ùå'} {ex}", callback_data=f"toggle_buy_{ex}")]
            for ex in EXCHANGES.keys()
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
        await query.edit_message_text("üîò –í–∏–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è –ö–£–ü–Ü–í–õ–Ü:", reply_markup=InlineKeyboardMarkup(buttons))
    elif query.data == "toggle_sell_exchanges":
        buttons = [
            [InlineKeyboardButton(f"{'‚úÖ' if filters['exchanges_sell'][ex] else '‚ùå'} {ex}", callback_data=f"toggle_sell_{ex}")]
            for ex in EXCHANGES.keys()
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
        await query.edit_message_text("üîò –í–∏–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è –ü–†–û–î–ê–ñ–£:", reply_markup=InlineKeyboardMarkup(buttons))
    elif query.data.startswith("toggle_buy_"):
        ex = query.data.split("toggle_buy_")[1]
        filters['exchanges_buy'][ex] = not filters['exchanges_buy'][ex]
        buttons = [
            [InlineKeyboardButton(f"{'‚úÖ' if filters['exchanges_buy'][ex2] else '‚ùå'} {ex2}", callback_data=f"toggle_buy_{ex2}")]
            for ex2 in EXCHANGES.keys()
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
        await query.edit_message_text("üîò –í–∏–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è –ö–£–ü–Ü–í–õ–Ü:", reply_markup=InlineKeyboardMarkup(buttons))
    elif query.data.startswith("toggle_sell_"):
        ex = query.data.split("toggle_sell_")[1]
        filters['exchanges_sell'][ex] = not filters['exchanges_sell'][ex]
        buttons = [
            [InlineKeyboardButton(f"{'‚úÖ' if filters['exchanges_sell'][ex2] else '‚ùå'} {ex2}", callback_data=f"toggle_sell_{ex2}")]
            for ex2 in EXCHANGES.keys()
        ]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")])
        await query.edit_message_text("üîò –í–∏–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è –ü–†–û–î–ê–ñ–£:", reply_markup=InlineKeyboardMarkup(buttons))
    elif query.data == "back_to_filters":
        await filters_command(update, context)

async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    awaiting = context.user_data.get("awaiting")
    if not awaiting:
        return

    try:
        value = float(update.message.text)
        filters = get_user_filters(context)
        filters[awaiting] = value
        context.user_data["awaiting"] = None
        await update.message.reply_text(f"‚úÖ –§—ñ–ª—å—Ç—Ä '{awaiting}' –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {value}.", reply_markup=build_filters_menu(filters))
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("filters", filters_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )
