import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, ContextTypes, CommandHandler,
                          MessageHandler, CallbackQueryHandler, filters)
from arbitrage import fetch_prices_from_exchanges, find_arbitrage_opportunities, EXCHANGES

TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DEFAULT_FILTERS = {
    'min_volume': 10,
    'min_profit': 0.8,
    'budget': 100,
    'exchanges_buy': {ex: True for ex in EXCHANGES.keys()},
    'exchanges_sell': {ex: True for ex in EXCHANGES.keys()}
}

def build_filters_menu(filters):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üì¶ –ú—ñ–Ω. –æ–±—Å—è–≥: {filters['min_volume']}$", callback_data="set_min_volume")],
        [InlineKeyboardButton(f"üí∞ –ú—ñ–Ω. –ø—Ä–∏–±—É—Ç–æ–∫: {filters['min_profit']}%", callback_data="set_min_profit")],
        [InlineKeyboardButton(f"üßæ –ë—é–¥–∂–µ—Ç: {filters['budget']}$", callback_data="set_budget")],
        [InlineKeyboardButton("üîÅ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh")],
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ.")

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    filters = context.user_data.get("filters", DEFAULT_FILTERS.copy())
    for key, value in DEFAULT_FILTERS.items():
        if key not in filters:
            filters[key] = value

    await update.message.reply_text("üîé –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω –∑ –±—ñ—Ä–∂...")
    prices = await fetch_prices_from_exchanges()
    await update.message.reply_text(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω–∏: {sum(len(p) for p in prices.values())} –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä")

    await update.message.reply_text("üìä –®—É–∫–∞—î–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    signals = find_arbitrage_opportunities(prices, filters)

    if not signals:
        await update.message.reply_text("‚ùå –ú–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑ —ñ–Ω—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.")
        return

    for sig in signals:
        msg = (
            f"üí∏ {sig['coin']}: {sig['buy_exchange']} ‚Üí {sig['sell_exchange']}\n"
            f"‚Ä¢ –ö—É–ø—ñ–≤–ª—è: {sig['buy_price']}$\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–∂: {sig['sell_price']}$\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ—ñ—Ç: {sig['spread']}%\n"
            f"‚Ä¢ –û–±—Å—è–≥: {sig['volume']}$\n"
            f"‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –≤–∏–≤–æ–¥—É: {sig['withdraw_fee']}\n"
            f"‚Ä¢ –ú–µ—Ä–µ–∂–∞: {sig['network']}\n"
            f"‚Ä¢ –ß–∞—Å –ø–µ—Ä–µ–∫–∞–∑—É: {sig['transfer_time']}"
        )
        await update.message.reply_text(msg)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚öôÔ∏è –§—ñ–ª—å—Ç—Ä–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è. –£ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )

