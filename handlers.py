from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from arbitrage import generate_arbitrage_signals


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂", callback_data="find")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:",
        reply_markup=reply_markup
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    filters = {
        "min_profit": 0.8,
        "min_volume": 10,
        "exchanges_buy": {
            "Bybit": True,
            "MEXC": True,
            "KuCoin": True,
            "BingX": True,
            "Gate": True,
        },
        "exchanges_sell": {
            "Bybit": True,
            "MEXC": True,
            "KuCoin": True,
            "BingX": True,
            "Gate": True,
        },
    }

    await query.edit_message_text("‚è≥ –ó–±–∏—Ä–∞—é –¥–∞–Ω—ñ –∑ –±—ñ—Ä–∂...")

    signals = await generate_arbitrage_signals(filters)

    if not signals:
        await query.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π.")
        return

    for signal in signals[:10]:  # –º–∞–∫—Å–∏–º—É–º 10 —Å–∏–≥–Ω–∞–ª—ñ–≤
        msg = (
            f"üìà <b>{signal['coin']}</b>\n"
            f"üîΩ –ö—É–ø–∏—Ç–∏ –Ω–∞: <b>{signal['buy_exchange']}</b> ‚Äî {signal['buy_price']} USDT\n"
            f"üîº –ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞: <b>{signal['sell_exchange']}</b> ‚Äî {signal['sell_price']} USDT\n"
            f"üìä –ü—Ä–æ—Ñ—ñ—Ç: <b>{signal['spread']}%</b>\n"
            f"üì¶ –û–±—Å—è–≥: {signal['volume']} USDT\n"
            f"üîó –ú–µ—Ä–µ–∂–∞: {signal['network']}\n"
            f"‚è± –¢—Ä–∞–Ω—Å—Ñ–µ—Ä: {signal['transfer_time']}\n"
        )
        await query.message.reply_text(msg, parse_mode="HTML")
