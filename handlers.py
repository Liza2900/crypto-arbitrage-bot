from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from filters import user_filters

EXCHANGES = ["KuCoin", "MEXC", "OKX", "Bitget", "BingX", "Gate", "CoinEx"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_filters:
        user_filters[user_id] = {
            "min_profit": 0.8,
            "min_volume": 10,
            "buy_exchanges": [],
            "sell_exchanges": [],
            "futures": False,
            "search_enabled": True,
            "budget": 100,
        }
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:", reply_markup=main_menu_keyboard())

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –ø–æ—à—É–∫", callback_data="toggle_search")],
        [InlineKeyboardButton("üìà –ú—ñ–Ω. –ø—Ä–æ—Ñ—ñ—Ç", callback_data="set_min_profit"),
         InlineKeyboardButton("üí∞ –ú—ñ–Ω. –æ–±—Å—è–≥", callback_data="set_min_volume")],
        [InlineKeyboardButton("üè¶ –ë—ñ—Ä–∂—ñ –ø–æ–∫—É–ø–∫–∏", callback_data="select_buy_exchanges"),
         InlineKeyboardButton("üè™ –ë—ñ—Ä–∂—ñ –ø—Ä–æ–¥–∞–∂—É", callback_data="select_sell_exchanges")],
        [InlineKeyboardButton("üìä –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ñ‚Äô—é—á–µ—Ä—Å–∏", callback_data="toggle_futures")],
        [InlineKeyboardButton("üíº –ë—é–¥–∂–µ—Ç", callback_data="set_budget")],
        [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫", callback_data="start_search")]
    ])

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "toggle_search":
        user_filters[user_id]["search_enabled"] = not user_filters[user_id]["search_enabled"]
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if user_filters[user_id]["search_enabled"] else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        await query.edit_message_text(f"–ü–æ—à—É–∫ {status}.", reply_markup=main_menu_keyboard())

    elif query.data == "toggle_futures":
        user_filters[user_id]["futures"] = not user_filters[user_id]["futures"]
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if user_filters[user_id]["futures"] else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        await query.edit_message_text(f"–§‚Äô—é—á–µ—Ä—Å–∏ {status}.", reply_markup=main_menu_keyboard())

    elif query.data == "set_min_profit":
        await query.edit_message_text("–í–≤–µ–¥–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç —É %:")
        context.user_data["setting"] = "min_profit"

    elif query.data == "set_min_volume":
        await query.edit_message_text("–í–≤–µ–¥–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —É USDT:")
        context.user_data["setting"] = "min_volume"

    elif query.data == "set_budget":
        await query.edit_message_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç —É USDT:")
        context.user_data["setting"] = "budget"

    elif query.data == "select_buy_exchanges":
        await show_exchange_selection(update, context, "buy_exchanges")

    elif query.data == "select_sell_exchanges":
        await show_exchange_selection(update, context, "sell_exchanges")

    elif query.data == "start_search":
        await query.edit_message_text("–ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏‚Ä¶")
        # —Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–æ—à—É–∫—É

async def show_exchange_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, exchange_type: str):
    user_id = update.callback_query.from_user.id
    selected = user_filters[user_id].get(exchange_type, [])

    keyboard = []
    for ex in EXCHANGES:
        selected_symbol = "‚úÖ " if ex in selected else ""
        keyboard.append([
            InlineKeyboardButton(f"{selected_symbol}{ex}", callback_data=f"toggle_{exchange_type}_{ex}")
        ])

    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    await update.callback_query.edit_message_text(
        f"–û–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—ñ –¥–ª—è {'–∫—É–ø—ñ–≤–ª—ñ' if exchange_type == 'buy_exchanges' else '–ø—Ä–æ–¥–∞–∂—É'}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_exchange_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("toggle_buy_exchanges_"):
        exchange = query.data.replace("toggle_buy_exchanges_", "")
        toggle_exchange(user_id, "buy_exchanges", exchange)
        await show_exchange_selection(update, context, "buy_exchanges")

    elif query.data.startswith("toggle_sell_exchanges_"):
        exchange = query.data.replace("toggle_sell_exchanges_", "")
        toggle_exchange(user_id, "sell_exchanges", exchange)
        await show_exchange_selection(update, context, "sell_exchanges")

    elif query.data == "back_to_menu":
        await query.edit_message_text("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

def toggle_exchange(user_id: int, key: str, exchange: str):
    exchanges = user_filters[user_id].get(key, [])
    if exchange in exchanges:
        exchanges.remove(exchange)
    else:
        exchanges.append(exchange)
    user_filters[user_id][key] = exchanges

