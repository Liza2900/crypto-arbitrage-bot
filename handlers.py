from telegram import Update
from telegram.ext import CallbackContext
from filters import get_user_filters, save_user_filters, settings_keyboard, exchanges_keyboard

async def callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    filters = get_user_filters(chat_id)

    if query.data == "find_arbitrage":
        await query.edit_message_text("‚è≥ –®—É–∫–∞—é –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
        from arbitrage import fetch_prices_from_exchanges, find_arbitrage_opportunities
        prices = await fetch_prices_from_exchanges(filters)
        opportunities = find_arbitrage_opportunities(prices, filters)
        if opportunities:
            text = "\n\n".join(opportunities)
        else:
            text = "‚ùå –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏."
        await context.bot.send_message(chat_id, text)

    elif query.data == "settings":
        await query.edit_message_text("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=settings_keyboard(filters))

    elif query.data == "change_min_profit_usd":
        await context.bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É $ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2):")
        context.user_data["awaiting_min_profit_usd"] = True

    elif query.data == "change_budget":
        await context.bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –±—é–¥–∂–µ—Ç —É USDT (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):")
        context.user_data["awaiting_budget"] = True

    elif query.data == "change_min_volume":
        await context.bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —É–≥–æ–¥–∏ –≤ USDT (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10):")
        context.user_data["awaiting_min_volume"] = True

    elif query.data == "change_max_coin_price":
        await context.bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ü—ñ–Ω—É –º–æ–Ω–µ—Ç–∏ –≤ $ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15):")
        context.user_data["awaiting_max_coin_price"] = True

    elif query.data == "toggle_exchanges":
        await query.edit_message_text("üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω—ñ –±—ñ—Ä–∂—ñ:", reply_markup=exchanges_keyboard(filters["enabled_exchanges"]))

    elif query.data.startswith("toggle_exchange::"):
        exchange = query.data.split("::")[1]
        enabled = filters["enabled_exchanges"]
        if exchange in enabled:
            enabled.remove(exchange)
        else:
            enabled.append(exchange)
        save_user_filters(chat_id, filters)
        await query.edit_message_text("üü¢ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –±—ñ—Ä–∂:", reply_markup=exchanges_keyboard(filters["enabled_exchanges"]))

async def message_handler(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    filters = get_user_filters(chat_id)

    if context.user_data.get("awaiting_min_profit_usd"):
        try:
            min_profit = float(update.message.text.strip())
            filters["min_profit_usd"] = min_profit
            await update.message.reply_text(f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_profit} $", reply_markup=settings_keyboard(filters))
        except:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        context.user_data["awaiting_min_profit_usd"] = False

    elif context.user_data.get("awaiting_budget"):
        try:
            budget = float(update.message.text.strip())
            filters["budget"] = budget
            await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {budget} USDT", reply_markup=settings_keyboard(filters))
        except:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        context.user_data["awaiting_budget"] = False

    elif context.user_data.get("awaiting_min_volume"):
        try:
            min_vol = float(update.message.text.strip())
            filters["min_volume_usdt"] = min_vol
            await update.message.reply_text(f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_vol} USDT", reply_markup=settings_keyboard(filters))
        except:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        context.user_data["awaiting_min_volume"] = False

    elif context.user_data.get("awaiting_max_coin_price"):
        try:
            max_price = float(update.message.text.strip())
            filters["max_coin_price"] = max_price
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –º–æ–Ω–µ—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {max_price} $", reply_markup=settings_keyboard(filters))
        except:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        context.user_data["awaiting_max_coin_price"] = False

    save_user_filters(chat_id, filters)

